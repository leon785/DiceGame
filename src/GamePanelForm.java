
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Leon
 */
public class GamePanelForm extends javax.swing.JFrame {
    Modes m = new Modes();
    UserData ud = new UserData();
    UserData ud2 = new UserData();
    PyramidDiceGame pdg = new PyramidDiceGame();
    boolean hasP2 = false;
    boolean createP2 = false;
    boolean CPUdone = false;
    boolean isSaved = false;
    ArrayList<String> userData;
    
    public GamePanelForm() {
        initComponents();
        if (!FileIO.readDataFromFile("TempFile.dat").get(0).equals("Guest01")) {
            FileIO.dataSync(ud, 0);
        } else {
            ud.setUserName("Guest01"); 
        }
        
    }
    
    public GamePanelForm(ArrayList<String> userData) {
        this.userData = userData;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        rollDiceButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        modeComboBox = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        gameTextArea = new javax.swing.JTextArea();
        p2Button = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        backMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        aboutMenu = new javax.swing.JMenu();
        rulesMenuItem = new javax.swing.JMenuItem();
        achievementsMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Game Mode:");

        rollDiceButton.setText("START / ROLL");
        rollDiceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rollDiceButtonActionPerformed(evt);
            }
        });

        saveButton.setText("SAVE");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        modeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Choose a mode", "Practice", "Player VS CPU", "PVP" }));
        modeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modeComboBoxActionPerformed(evt);
            }
        });

        gameTextArea.setColumns(20);
        gameTextArea.setRows(5);
        jScrollPane1.setViewportView(gameTextArea);

        p2Button.setText("Challenger: login");
        p2Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                p2ButtonActionPerformed(evt);
            }
        });

        fileMenu.setText("File");

        backMenuItem.setText("Back To Menu");
        backMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(backMenuItem);

        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        jMenuBar1.add(fileMenu);

        aboutMenu.setText("About");

        rulesMenuItem.setText("Rules");
        rulesMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rulesMenuItemActionPerformed(evt);
            }
        });
        aboutMenu.add(rulesMenuItem);

        achievementsMenuItem.setText("Achievements");
        achievementsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                achievementsMenuItemActionPerformed(evt);
            }
        });
        aboutMenu.add(achievementsMenuItem);

        jMenuBar1.add(aboutMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(modeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(0, 0, Short.MAX_VALUE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(rollDiceButton)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(saveButton)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(p2Button)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 419, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(modeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(p2Button))
                .addGap(12, 12, 12)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 174, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rollDiceButton)
                    .addComponent(saveButton))
                .addGap(14, 14, 14))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        MenuBar.exitProgram();
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void rulesMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rulesMenuItemActionPerformed
        MenuBar.rule();
    }//GEN-LAST:event_rulesMenuItemActionPerformed

    private void backMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backMenuItemActionPerformed
        if (!ud.getUserName().equals("Guest01")) {
           JOptionPane.showMessageDialog(null, "You have logged out"); 
        }
        this.dispose();
        new WelcomeForm().setVisible(true);
    }//GEN-LAST:event_backMenuItemActionPerformed

    private void modeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modeComboBoxActionPerformed
        ArrayList<String> arr = FileIO.readDataFromFile("TempFile.dat");
        String name = arr.get(0);
        arr = new ArrayList<>();
        int[] d = new int[5];
        
        hasP2 = false;
        createP2 = false;
        CPUdone = false;
        isSaved = false;
        ud.setMode((String)modeComboBox.getSelectedItem());
        ud.setDices(d);
        ud.setBase("No");
        ud.setCentre("No");
        ud.setTop("No");
        ud.setScore(0);
        ud.setRound(0); //↑initialize variables 

        if (modeComboBox.getSelectedItem().equals("PVP")) {
            arr.add(name);
            arr.add("PVP");
            FileIO.saveDataToFileTemp("TempFile.dat", arr);//↑initialize TempFile.dat (without P2)
        } else {
            arr.add(name);
            arr.add(modeComboBox.getSelectedItem().toString());
            FileIO.saveDataToFileTemp("TempFile.dat", arr);//↑initialize TempFile.dat (without P2)
        }
        
        
        ud2 = new UserData();
        p2Button.setText("Challenger: login");
        gameTextArea.setText("Host: " + ud.getUserName() + "\n" + "Current mode: " + ud.getMode());
    }//GEN-LAST:event_modeComboBoxActionPerformed

    private void rollDiceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rollDiceButtonActionPerformed
        ArrayList arr = FileIO.readDataFromFile("TempFile.dat");
        
        if (ud.getMode().equals("Choose a mode") || ud.getMode().equals("")) {
            JOptionPane.showMessageDialog(null, "You need to choose a mode");
        } else if (ud.getMode().equals("PVP") && !hasP2) {
            JOptionPane.showMessageDialog(null, "Please login for challenger");
        } else if (ud.getMode().equals("PVP") && !createP2) {
            if (!arr.get(1).equals("")) {
                createP2 = true;
                ud2 = new UserData();
                if (arr.get(1).equals("Guest02")) {
                    ud2.setUserName("Guest02");
                } else {
                    FileIO.dataSync(ud2, 1); 
                }
                ud2.setMode("PVP");
                p2Button.setText(ud2.getUserName());
            } else {
                JOptionPane.showMessageDialog(null, "There are not a challenger yet");
            }
        } else if (ud.getMode().equals("PVP") && ud.getRound() == 3 && ud2.getRound() < 3){
            display(ud2);
            player2Turn(ud2);
        } else {
            display(ud);
        }
        
        if (ud.getRound() == 3 && !ud.getMode().equals("Practice")) {
            if (ud.getMode().equals("Player VS CPU") && !CPUdone){
                CPUturn();
            } else if (ud.getMode().equals("PVP") && ud2.getRound() == 0){
                player2Turn(ud2);
            }
        }
    }//GEN-LAST:event_rollDiceButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        if(isSaved){
            JOptionPane.showMessageDialog(null, "This game is already saved");
        } else if (!ud.getMode().equals("PVP")) {  //Practice and PVE below
            if (ud.getUserName().equals("Guest01")) {
                JOptionPane.showMessageDialog(null, "Login first to save data");
            } else if (ud.getRound() < 3) {
                JOptionPane.showMessageDialog(null, "Please finish the game first");
            } else {
                pdg.save(ud, 0);
                isSaved = true;
                JOptionPane.showMessageDialog(null, "Saved successfully");
            }
        } else {  //PVP below
            if (!hasP2 || !createP2) {
                JOptionPane.showMessageDialog(null, "Please play the game first");
            } else if (ud.getRound() < 3 || ud2.getRound() < 3) {
                JOptionPane.showMessageDialog(null, "Please finish the game first");
            } else if (ud.getUserName().equals("Guest01") && ud2.getUserName().equals("Guest02")) {
                JOptionPane.showMessageDialog(null, "Login first to save data");
            } else if (!ud.getUserName().equals("Guest01") && ud2.getUserName().equals("Guest02")) {
                pdg.save(ud, 0);
                isSaved = true;
                JOptionPane.showMessageDialog(null, "Saved successfully");
            } else if (ud.getUserName().equals("Guest01") && !ud2.getUserName().equals("Guest02")) {
                pdg.save(ud2, 1);
                isSaved = true;
                JOptionPane.showMessageDialog(null, "Saved successfully");
            } else {
                pdg.save(ud, 0);
                pdg.save(ud2, 1);
                isSaved = true;
                JOptionPane.showMessageDialog(null, "Saved successfully");
            }
        } 
    }//GEN-LAST:event_saveButtonActionPerformed

    private void p2ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_p2ButtonActionPerformed
        if (!ud.getMode().equals("PVP")) {
            JOptionPane.showMessageDialog(null, "Please choose PVP mode first");
        } else if (ud.getRound() == 0 && ud2.getRound() == 0) {
            hasP2 = true;
            new P2LoginForm().setVisible(true);
        } else if (ud.getRound() == 0 && !hasP2) {
            hasP2 = true;
            new P2LoginForm().setVisible(true);
        } else {
            JOptionPane.showMessageDialog(null, "Please finish this game first");
        }
    }//GEN-LAST:event_p2ButtonActionPerformed

    private void achievementsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_achievementsMenuItemActionPerformed
        if (ud.getUserName().equals("Guest01")) {
            JOptionPane.showMessageDialog(null, "Please login first");
        }else {
            new AchievementsForm().setVisible(true);
        }
    }//GEN-LAST:event_achievementsMenuItemActionPerformed
    
    public void appendGame(UserData ud) {
        gameTextArea.append("\n\n" + Arrays.toString(ud.getDices()));
        gameTextArea.append("\nStatus: base " + ud.getBase() + ", centre " + ud.getCentre() + ", top " + ud.getTop());
        if (ud.getRound() == 3) {
            gameTextArea.append("\nFinal score is " + ud.getScore());
        } else {
            int rollTime = 3 - ud.getRound();
            gameTextArea.append("\nCurrent Score: " + ud.getScore());
            gameTextArea.append("\n" + rollTime + " chance(s) remains");
        }
    }

    public void display(UserData ud) {
        if (ud.getRound() <= 2) {
            pdg.rollDice(ud);
            appendGame(ud);
            checkAch(ud);
        } else {
            JOptionPane.showMessageDialog(null, "You have no more chance to roll");
        }
    }
    
    public void CPUturn() {
        gameTextArea.append("\n\n————————CPU's turn————————");
        UserData CPUdat = new UserData();
        for (int i = 0; i < 3; i++) {
            CPUdat = m.PVCmode();
            appendGame(CPUdat);
        }
        if (ud.getScore() > CPUdat.getScore()) {
            gameTextArea.append("\n\n" + ud.getUserName() + " wins!");
        } else if (ud.getScore() < CPUdat.getScore()) {
            gameTextArea.append("\n\nCPU wins!");
        } else {
            gameTextArea.append("\nTie! Worthy Opponent");
        }
        CPUdone = true;
    }
    
    public void player2Turn(UserData ud2) {
        if (ud2.getRound() == 0){
            gameTextArea.append("\n\n————————" + ud2.getUserName() + "'s turn————————");
            gameTextArea.append("\n3 more chances remains");
        }
        if (ud2.getRound() == 3) {
            if (ud2.getScore() > ud.getScore()) {
                gameTextArea.append("\n\n" + ud2.getUserName() + " wins!");
            } else if (ud2.getScore() < ud.getScore()) {
                gameTextArea.append("\n\n" + ud.getUserName() + " wins!");
            } else {
                gameTextArea.append("\nTie! Worthy Opponent");
            }
        }
    }
    
    public void checkAch(UserData ud) {
        int[] d = ud.getDices();
        
        for (int i = 0; i < d.length-2; i++) {
            if (ud.getAch1().equals("No")) {
                if (d[i] == 6 && d[i+1] == 6 && d[i+2] == 6){
                    JOptionPane.showMessageDialog(null, "Congratulations, you have reached an achievement!\nPress SAVE button to save",
                    "Achievement reached", 1);
                    ud.setAch1("Yes"); 
                }
            }
            
            if (ud.getAch2().equals("No")) {
                if (ud.getRound() == 1 && ud.getScore() != 0) {
                    JOptionPane.showMessageDialog(null, "Congratulations, you have reached an achievement!\nPress SAVE button to save",
                    "Achievement reached", 1);
                    ud.setAch2("Yes"); 
                }
            }
            
            if (ud.getAch3().equals("No")) {
                if (ud.getRound() == 3 && ud.getScore() == 3) {
                    JOptionPane.showMessageDialog(null, "Congratulations, you have reached an achievement!\nPress SAVE button to save",
                    "Achievement reached", 1);
                    ud.setAch3("Yes"); 
                }
            }
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GamePanelForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GamePanelForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GamePanelForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GamePanelForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GamePanelForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu aboutMenu;
    private javax.swing.JMenuItem achievementsMenuItem;
    private javax.swing.JMenuItem backMenuItem;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JTextArea gameTextArea;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> modeComboBox;
    private javax.swing.JButton p2Button;
    private javax.swing.JButton rollDiceButton;
    private javax.swing.JMenuItem rulesMenuItem;
    private javax.swing.JButton saveButton;
    // End of variables declaration//GEN-END:variables
}
