
import javax.swing.JOptionPane;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Leon
 */
public class RegistrationForm extends javax.swing.JFrame {
    FileIO fio = new FileIO();
    ArrayList<String> toFileData;
    ArrayList<String> userDat;
    /**
     * Creates new form RegistrationForm
     */
    public RegistrationForm() {
        initComponents();
        toFileData = new ArrayList<>();
        userDat = new ArrayList<>();
    }
    
    public void populateArrayList() {
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        confirmButton = new javax.swing.JButton();
        regNameLabel = new javax.swing.JLabel();
        regPasswordLabel = new javax.swing.JLabel();
        regPasswordRepeatLabel = new javax.swing.JLabel();
        regNameTextField = new javax.swing.JTextField();
        regPasswordTextField = new javax.swing.JTextField();
        regPasswordRepeatTextField = new javax.swing.JTextField();
        backButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        exitMenuItem = new javax.swing.JMenuItem();
        aboutMenu = new javax.swing.JMenu();
        rulesMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Registration");

        confirmButton.setText("OK");
        confirmButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmButtonActionPerformed(evt);
            }
        });

        regNameLabel.setText("Name");

        regPasswordLabel.setText("Password");

        regPasswordRepeatLabel.setText("Confirm Password");

        regNameTextField.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        regNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                regNameTextFieldActionPerformed(evt);
            }
        });

        regPasswordTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                regPasswordTextFieldActionPerformed(evt);
            }
        });

        regPasswordRepeatTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                regPasswordRepeatTextFieldActionPerformed(evt);
            }
        });

        backButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/back+icon1.png"))); // NOI18N
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        fileMenu.setText("File");

        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        jMenuBar1.add(fileMenu);

        aboutMenu.setText("About");

        rulesMenuItem.setText("Rules");
        rulesMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rulesMenuItemActionPerformed(evt);
            }
        });
        aboutMenu.add(rulesMenuItem);

        jMenuBar1.add(aboutMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(regPasswordRepeatLabel)
                            .addComponent(regPasswordLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(regNameLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(regPasswordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(regNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(regPasswordRepeatTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(backButton)))
                .addContainerGap(68, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(confirmButton, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(backButton)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(regNameLabel)
                    .addComponent(regNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(regPasswordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(regPasswordLabel))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(regPasswordRepeatTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(regPasswordRepeatLabel))
                .addGap(38, 38, 38)
                .addComponent(confirmButton)
                .addContainerGap(44, Short.MAX_VALUE))
        );

        regNameTextField.getAccessibleContext().setAccessibleDescription("sa");

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void regNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_regNameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_regNameTextFieldActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        this.dispose();
        new WelcomeForm().setVisible(true);
    }//GEN-LAST:event_backButtonActionPerformed

    private void confirmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmButtonActionPerformed
        String name = regNameTextField.getText().trim();
        String password = regPasswordTextField.getText().trim();
        String rePassword = regPasswordRepeatTextField.getText().trim();
        boolean isValid = false;
        
        if (regNameTextField.getText().isEmpty() || regPasswordTextField.getText().isEmpty() || regPasswordRepeatTextField.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please enter all fields", "You could be a little more patient...", 0);
        } else if (name.length() < 2 || name.length() > 10) {
            JOptionPane.showMessageDialog(null, "Username length should between 2 and 10", "Invalid Username", 0);
        } else if (password.length() < 8 || password.length() > 16) {
            JOptionPane.showMessageDialog(null, "Password length should between 8 and 16", "Invalid Password", 0);
        } else if (!hasDigit(password)) {
            JOptionPane.showMessageDialog(null, "Password must has at least one number", "Invalid Password", 0);
        } else if (!hasSymbol(password)) {
            JOptionPane.showMessageDialog(null, "Password must has at least one symbol \nFor example '!@#$%^&*()_+'", "Invalid Password", 0);
        } else if (!hasUppercase(password)) {
            JOptionPane.showMessageDialog(null, "Password must has at least one uppercase alphabetic character", "Invalid Password", 0);
        } else if (!hasLowercase(password)) {
            JOptionPane.showMessageDialog(null, "Password must contains lowercase letter", "Invalid Password", 0);
        } else if (!password.equals(rePassword)) {
            JOptionPane.showMessageDialog(null, "Inconsistent passwords", "Invalid Password", 0);
        } else if (fio.checkDuplication("userData.dat", name)) {
            JOptionPane.showMessageDialog(null, "This username has been registered", "Invalid Username", 0);
        } else {
            isValid = true;
        }
        
        if (isValid) {
            UserData ud = new UserData(name, password);
            toFileData.add(ud.toString());
            FileIO.saveDataToFile("userData.dat", toFileData);
            if (FileIO.readDataFromFile("TempFile.dat").isEmpty()) { 
                newPlayer(name);
            } else { 
                if (FileIO.readDataFromFile("TempFile.dat").size() == 1) {
                    newPlayer(name);
                } else if (!FileIO.readDataFromFile("TempFile.dat").get(1).equals("PVP")){
                    newPlayer(name);
                } else {
                    ArrayList a = FileIO.readDataFromFile("TempFile.dat");
                    a.set(1, name);
                    FileIO.saveDataToFileTemp("TempFile.dat", a);
                    this.dispose(); 
                    JOptionPane.showMessageDialog(null, "Click START button to confirm the challenger");
                }
            }
        }
    }//GEN-LAST:event_confirmButtonActionPerformed

    public void newPlayer(String name) {
        userDat.add(name);//username
        FileIO.saveDataToFileTemp("TempFile.dat", userDat);
        JOptionPane.showMessageDialog(null, "Welcome , " + name);
        this.dispose();
        new GamePanelForm().setVisible(true);
    }
    
    public boolean hasDigit(String str) {
        String regex = "[0-9]";
        Pattern pat = Pattern.compile(regex);
        Matcher m = pat.matcher(str);
        return m.find();
    }
    
    public boolean hasSymbol(String str) {
        String regex = "[!@#$%^&*()_+]+";
        Pattern pat = Pattern.compile(regex);
        Matcher m = pat.matcher(str);
        return m.find();
    }

    public boolean hasLowercase(String str) {
        String regex = "[a-z]+";
        Pattern pat = Pattern.compile(regex);
        Matcher m = pat.matcher(str);
        return m.find();
    }
    
    public boolean hasUppercase(String str) {
        String regex = "[A-Z]+";
        Pattern pat = Pattern.compile(regex);
        Matcher m = pat.matcher(str);
        return m.find();
    }
    
    private void regPasswordTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_regPasswordTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_regPasswordTextFieldActionPerformed

    private void regPasswordRepeatTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_regPasswordRepeatTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_regPasswordRepeatTextFieldActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        MenuBar.exitProgram();
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void rulesMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rulesMenuItemActionPerformed
        MenuBar.rule();
    }//GEN-LAST:event_rulesMenuItemActionPerformed
    
    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RegistrationForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RegistrationForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RegistrationForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RegistrationForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RegistrationForm().setVisible(true);
            }
        });
    }
 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu aboutMenu;
    private javax.swing.JButton backButton;
    private javax.swing.JButton confirmButton;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JLabel regNameLabel;
    private javax.swing.JTextField regNameTextField;
    private javax.swing.JLabel regPasswordLabel;
    private javax.swing.JLabel regPasswordRepeatLabel;
    private javax.swing.JTextField regPasswordRepeatTextField;
    private javax.swing.JTextField regPasswordTextField;
    private javax.swing.JMenuItem rulesMenuItem;
    // End of variables declaration//GEN-END:variables
}
